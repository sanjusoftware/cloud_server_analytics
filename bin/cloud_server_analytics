#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'cloud_server_analytics'

include GLI

program_desc 'Analytical reporting of Amazon EC2'

version CSA::VERSION

desc 'Enumerates running Ec2 instances and load them into a database'
command :load_instances do |c|
  c.action do |global_options, options, args|
    CSA::EC2.new.load_instances
  end
end

desc 'Updates the cost and utilization data in the system'
command :update_cost_and_utilization do |c|
  c.action do |global_options, options, args|
    CSA::CloudWatch.new.update_cost_and_utilization
  end
end

desc 'Prints an analytical report on the cost and utilization of the ec2 instances for a give time period'
command :cost_report do |c|
  c.desc 'Provide the time period for which you want the report [week, day, month]'
  c.default_value 'week'
  c.flag [:tp, 'time-period']

  c.desc 'Provide the start time for the period for which you want the report'
  c.default_value ''
  c.flag [:st, 'start-time']

  c.desc 'What report you want to see. [cost, utilization]'
  c.default_value 'cost'
  c.flag [:v, 'variable']

  c.desc 'attribute values by which to partition the output. [billing-owner]'
  c.default_value 'billing-owner'
  c.flag [:a, 'attribute']

  c.action do |global_options, options, args|
    CSA::EC2.new.print_report(options)
  end
end

desc 'Reports idle instances by billing owner'
command :idle_servers do |c|
  c.action do |global_options, options, args|
    idle_servers = CSA::EC2.new.report_idle_servers
    output = "BILLING OWNER | IDLE SERVERS\n"
    idle_servers.each_pair do |owner, servers|
      output.concat "#{owner} | #{servers.join(' , ')}\n"
    end
    STDOUT.write output
  end
end

desc 'Stops a server instance'
command :stop_server do |c|
  c.action do |global_options, options, args|
    CSA::EC2.new.stop_server(args)
  end
end

desc 'Creates the database tables'
command :create_db do |c|
  c.action do |global_options, options, args|
    CSA::Database.create_database
  end
end

pre do |global, command, options, args|
  CSA::Database.establish_connection("development")
  true
end

post do |global, command, options, args|
end

on_error do |exception|
  puts exception.message
  puts exception.backtrace
  true
end

exit GLI.run(ARGV)
