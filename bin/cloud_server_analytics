#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'cloud_server_analytics_version'
require 'cloud_server_analytics'

include GLI

program_desc 'Analytical reporting of Amazon EC2'

version CloudServerAnalytics::VERSION

desc 'Describe some switch here'
switch [:s, :switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f, :flagname]

desc 'Enumerates running Ec2 instances and load them into a database'
command :load_instances do |c|
  c.action do |global_options, options, args|
    CloudServerAnalytics::EC2.new.load_instances
  end
end

command :update_cost_and_utilization do |c|
  c.action do |global_options, options, args|
    CloudServerAnalytics::CloudWatch.new.update_cost_and_utilization
  end
end

desc 'Prints an analytical report on the cost and utilization of the ec2 instances for a give time period'
arg_name 'project_name [command[ command]*]'
command :report_cost do |c|
  c.desc 'Provide the time period for which you want the report [week, day, month]'
  c.default_value 'week'
  c.flag [:tp,'time-period']

  c.desc 'Provide the start time for the period for which you want the report'
  c.default_value '24hrs ago'
  c.flag [:st,'start-time']

  c.desc 'What report you want to see. [cost, utilization]'
  c.default_value 'cost'
  c.flag [:v,'variable']

  c.desc 'attribute values by which to partition the output. [billing-owner]'
  c.default_value 'billing-owner'
  c.flag [:a,'attribute']

  c.action do |global_options, options, args|
    puts options
    #CloudServerAnalytics::CloudWatch.new.update_cost_and_utilization

  end
end

desc 'Stops a server instance'
command :stop_server do |c|
  c.action do |global_options, options, args|
    CloudServerAnalytics::EC2.new.stop_server(args)
  end
end

desc 'Creates the database'
command :create_db do |c|
  c.action do |global_options, options, args|
    Database.create_database
  end
end

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
